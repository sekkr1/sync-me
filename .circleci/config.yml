version: 2
jobs:
  # The build job
  build:
    docker:
      - image: circleci/node
    steps:
      # Checkout the code from the branch into the working_directory
      - checkout
      # Log the current branch
      - run:
          name: Show current branch
          command: echo ${CIRCLE_BRANCH}
      # Restore local dependencies from cache
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "client/package.json" }}
            - v1-dependencies-
      # Install project dependencies
      - run:
          name: Install local dependencies
          command: yarn install
          working_directory: ~/project/client
      # Cache local dependencies if they don't exist
      - save_cache:
          key: v1-dependencies-{{ checksum "client/package.json" }}
          paths:
            - client/node_modules
      # Build project with different configuration based on
      # the current branch
      - run:
          name: Building
          command: npm run build
          working_directory: client
      # Cache the dist folder for the deploy job
      - save_cache:
          key: v1-dist-{{ .Environment.CIRCLE_BRANCH }}-{{ .Environment.CIRCLE_SHA1 }}
          paths:
            - client/dist
  deploy:
    docker:
      - image: circleci/node
    steps:
      - restore_cache:
          key: v1-dist-{{ .Environment.CIRCLE_BRANCH }}-{{ .Environment.CIRCLE_SHA1 }}
      - add_ssh_keys:
          fingerprints:
            - "14:6c:5d:10:58:c0:a2:9e:6a:b4:9d:31:02:3e:82:00"
      - run:
          name: Add server fingerprint to known_hosts
          command: echo $FINGERPRINT >> ~/.ssh/known_hosts
      - deploy:
          name: Deploy to server
          command: |
            ssh root@$SERVER rm -rf /var/www/sync-me.video/*
            scp -r client/dist/sync-me/* root@$SERVER:/var/www/sync-me.video
            ssh root@$SERVER chown www-data:www-data -R /var/www/sync-me.video
            systemctl reload nginx
workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build
      - deploy:
          requires:
            - build
